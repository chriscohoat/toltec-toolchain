# vim: set ft=sh:

# Print an error message to error output then exit
#
# Arguments:
#
# $1 - Error message to print
error() {
    echo "Error: $1" >&2
    exit 1
}

# Print a status message
#
# Arguments:
#
# $1 - Current status message
status() {
    echo "=> $1" >&2
}

# Get the full tag of a Docker image
#
# Arguments:
#
# $1 - Name of the image
# $2 - Version of the image
image-name() {
    echo "ghcr.io/chriscohoat/$1:${2:-latest}"
}

# Requires jq for parsing JSON - ensure jq is installed or adjust parsing as needed
check-package-permissions() {
    local image_name=$1
    local version=${2:-latest}
    local gh_api="https://api.github.com"
    local package_type="container" # For Docker images, the package type is container
    local api_url="$gh_api/user/packages/$package_type/$image_name/versions"

    echo "Final URL: $api_url"

    # Make the request and save the full response to a variable
    local response=$(curl -sH "Authorization: token $GITHUB_TOKEN" "$api_url")

    echo "Full API Response:"
    echo "$response"

    # Fetch the package ID using the response and jq to parse the JSON
    local package_id=$(echo "$response" | jq -r ".[] | select(.name == \"$version\") | .id")

    # If no package_id is found, it might mean the package/version doesn't exist yet, which might be okay for a push operation
    if [[ -z $package_id ]]; then
        echo "Package/version does not exist, assuming write access is available for creation."
        exit
    else
        echo "Package with ID $package_id exists, proceeding with assumption of write access."
    fi
}
